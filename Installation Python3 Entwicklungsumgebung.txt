Installation Python3 Entwicklungsumgebung.txt

div. Notizen und kurze Wegleitung für steinigen Weg der Entwicklung in Python...

Stefan Braun / sbraun@datacomm.ch

[Warnung: Text ist "work in progress"]
==>to do: sobald Weg gefunden ist, diesen sauber dokumentieren!!!


(Entwicklersystem: Win10 Pro x64)
=>jedoch Anwendungen sollen auch auf Win7 32Bit laufen,
darum Python 3 x32 (Anaconda3) als Root-Anaconda-Environment


1) Installation Anaconda:
https://www.anaconda.com/download/

=>Installation "all users"
=>Zu Beachten: Pfad ohne Leerzeichen: https://docs.anaconda.com/anaconda/faq#in-what-folder-should-i-install-anaconda-on-windows
==>gewählt: C:\Anaconda3
=>Installation ohne "Microsoft VSCode".


2) ev: GitHub Desktop installieren
https://desktop.github.com/
https://central.github.com/deployments/desktop/desktop/latest/win32


3) Git for Windows installieren
(gemäss https://github.com/desktop/desktop/issues/3801
können so externe Programme wie z.B. PyCharm Git-Funktionalität nutzen)
https://gitforwindows.org/

=>bei Installation: Notepad++ als Git-Standard-Editor konfigurieren.


4) PyCharm installieren
PyCharm Community Version wählen
https://www.jetbrains.com/pycharm/download/#section=windows

=>Desktop-Link "64-bit launcher"
=>.py File Association erstellen
=>"Download and install JRE x86 by JetBrains" (irgendwo stand diese Empfehlung...)


5) ev: Test der Installation:
-bei Start von PyCharm "Check out from Version Control"
=>Git wählen, https://github.com/stefanbraun-private/pyVisiToolkit.git

-via Startmenü "Anaconda-Navigator" starten
prüfen, welche Environments vorhanden sind


6) Beispiel: neues Projekt "visitoolkit_psc2alm",
als Anwendung des Python-Moduls "visitoolkit_connector"
=>es ist nicht vorgesehen, dass das "PSC to ALM Mappingtool" Funktionalität zur Verfügung stellt,
  darum nur Windows-Binaries und Sourcecode auf GitHub (kein PyPI-Paket)


-"Pycharm" starten, "create new "project",
Name/Ablageort normalerweise im Benutzerverzeichnis: "C:\Users\Asenta\PycharmProjects\visitoolkit_psc2alm"
(neues Conda-Environment "visitoolkit_psc2alm" (Python 3.x) erstellen lassen,
Option "Make available to all projects" nicht aktivieren)


Zum Start der Programmierung alle Python-Packages im aktuellen Environment auf den aktuellen Stand bringen:
-"Pycharm" beenden
-"Anaconda Prompt" starten
-conda Environment aktivieren: "activate visitoolkit_psc2alm"
-conda selber aktualisieren: "conda update -n base conda"
-das Anaconda-Metapaket aktualisieren: "conda install -c anaconda python"


-"Pycharm" -> New Python package: "visitoolkit_psc2alm" ->ergibt Unterordner im Python-Projektordner
bestehenden Quellcode aus Vorgängerprojekt übernehmen und für Python3 bereinigen:
  -"pyVisiToolkit\src\tools\PSC_to_ALM_Mapper.py" in diesen Unterordner kopieren
  -automatisierte Konvertierung Python2-Quellcode zu Python3; Print-Statements habe ich nie verwendet:
      ->"Anaconda Prompt" starten
      ->conda Environment aktivieren: "activate visitoolkit_psc2alm"
      ->"cd C:\Users\Asenta\PycharmProjects\visitoolkit_psc2alm"
      ->"2to3 -w -x print visitoolkit_psc2alm\psc2alm.py"
  -Python-Standard Einrückung mittels 4x Space anstelle Tab korrigieren
      ->Notepad++, RegEx Suchen/Ersetzen: "\t"->"    "

-"Pycharm" -> "Settings" -> "Project: visitoolkit_psc2alm" -> "Interpreter"
  (für Entwicklung benötigt)
  -> Package "visitoolkit-connector" via PyPI installieren (grünes "Conda"-Icon inaktiv, dann "+"),
     zur Vermeidung von Inkompatibilitäten auf bestimmte Version einschränken
     (komisch: PyPI-Pakete lassen sich bei diesem PyCharm-Projekt nicht anzeigen...?!?
      =>Abhilfe: "Anaconda Prompt" starten -> "activate visitoolkit_psc2alm", "pip install visitoolkit-connector"
  -> Package "PyInstaller" ebenfalls in Pycharm via PyPI installieren


Für exakte Duplizierung der Entwicklungsumgebung die Version aller genutzten Conda-Packages erfassen:
(gemäss https://datascience.stackexchange.com/questions/24093/how-to-clone-python-working-environment-on-another-machine)
-"Anaconda Prompt" starten
-conda Environment aktivieren: "activate visitoolkit_psc2alm"
"cd C:\Users\Asenta\PycharmProjects\visitoolkit_psc2alm"
"conda env export > environment.yml" erzeugt Datei "environment.yml"
=>Wiederherstellung klappe dann folgendermassen: "conda env create -f environment.yml" // dies habe ich noch nicht ausprobiert...



# FIXME: Wegen "Nur-Binary-Distribution" muss untenstehende Vorgehensweise überarbeitet werden
7) Veröffentlichung Projekt:

Vorbereitung: ev. folgende Dateien überarbeiten:
.gitignore	// Unterordner ".idea" schliesse ich nicht aus git aus, vielleicht nützt es mal in Zukunft, wenn komplette Umgebung neu installiert werden muss
CHANGES.txt
LICENSE.txt
MANIFEST.in	// Inhalt ist mir nicht mehr ganz klar... :-/
README.md	// in "Pycharm" gibts guten "MarkDown"-Editor! Die gerenderte Ausgabe wird auf GitHub Projektwebseite veröffentlicht



in PyCharm:
->Einstellungen ->VCS GitHub Account hinterlegen
->VCS ->publish on GitHub (NUR beim ersten Mal und falls es noch nicht existiert!)
->VCS ->Git ->Commit (nach jeder Code-Änderung, dies beeinflusst nur lokales Repository)
->VCS ->Git ->Push... (dies lädt die letzten Änderungen auf GitHub)



Windows EXE-Datei erstellen :
=>siehe Anleitung unter
https://pyinstaller.readthedocs.io/en/stable/operating-mode.html#bundling-to-one-file
-"Anaconda Prompt" starten
-conda Environment aktivieren: "activate visitoolkit_psc2alm"
-in Projektverzeichnis wechseln: "cd C:\Users\Asenta\PycharmProjects\visitoolkit_psc2alm"
-"pyinstaller --onefile visitoolkit_psc2alm\psc2alm.py"
==>dies generiert die einzelne EXE-Datei unter "..\dist",
diese kann auf GitHub als Release hochgeladen werden.

(zu beachten: auch wenn Python-Scripte in PyCharm fehlerfrei abgearbeitet werden,
das Zusammenschnüren zu einem EXE-File birgt verschiedene Risiken...
z.B. nicht aufgelöste Abhängigkeiten,
oder z.B. falsches Encoding beim Textdatei-Handling im Konsolenprogramm, etc.
http://python-notes.curiousefficiency.org/en/latest/python3/text_file_processing.html
)



==========================================================================================================

Anhang: diverse ausführliche Notizen und Erkenntnisse nach diversen Recherchen... :-/
**************************************************************************************
=>PyPI Package erstellen:
-siehe https://the-hitchhikers-guide-to-packaging.readthedocs.io/en/latest/index.html
-PyPI-Projektbeschreibung (PyPI-Webseite des Package) kann aus existierender "README.md" generiert werden:
 https://packaging.python.org/guides/making-a-pypi-friendly-readme/
 (=>README-Datei für GitHub ist in MarkDown *.md formatiert, PyCharm hat internen Editor inkl. Vorschau)
in PyCharm kann mittels "Tools" direkt setup.py erstellt und "setup.py-Task" aufgerufen werden
(jedoch fehlt Paket "docutils"...
somit "Settings"->"Python Interpreter"->"use Conda" / "+" nach diesem Paket suchen und dieses installieren.

=>aktuellere Anleitung:
https://packaging.python.org/tutorials/packaging-projects/#uploading-your-project-to-pypi
(somit Paket "twine" installieren mittels PyCharm)
==>zu beachten: https://anweshadas.in/how-to-upload-a-package-in-pypi-using-twine/
==>Anleitung: https://pypi.org/project/twine/

==>Twine in Anaconda nutzen
(SO GEHT ES nachdem man die setup.py-Tasks bis "register" durchgeführt hat;
neuerdings läuft PyPI mit "Warehouse" und "register"-Kommando vor dem "upload" wird beim neuen pypi.org nicht mehr verwendet!!!):
-"Anaconda Prompt" starten
-conda Environment aktivieren: "activate pyVisiToolkit-eventsystem"
-in Projektverzeichnis wechseln: "cd C:\Users\Asenta\PycharmProjects\pyVisiToolkit-eventsystem"
-hochladen des in ...\dist\. erzeugten Python-Installationspakets: "twine upload dist\*"
(Ziel ist defaultmässig PyPI.org, twine fragt dann nach PyPI-Benutzer/Passwort)
=>Paket ist dann unter https://pypi.org/project/pyVisiToolkit-eventsystem


to do:
lesen: https://datascience.stackexchange.com/questions/24093/how-to-clone-python-working-environment-on-another-machine
lesen: http://python-packaging.readthedocs.io/en/latest/minimal.html
lesen: http://docs.python-guide.org/en/latest/writing/structure/
lesen: https://legacy.python.org/dev/peps/pep-0423/
Umstrukturieren: https://github.com/stefanbraun-private/pyVisiToolkit.git