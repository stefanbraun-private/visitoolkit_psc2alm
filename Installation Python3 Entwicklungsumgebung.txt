Installation Python3 Entwicklungsumgebung.txt

div. Notizen und kurze Wegleitung für steinigen Weg der Entwicklung in Python...

Stefan Braun / sbraun@datacomm.ch

[Warnung: Text ist "work in progress"]
==>to do: sobald Weg gefunden ist, diesen sauber dokumentieren!!!


Anpassung per 10.10.2018: Entwicklersystem: Win7 x86 (32Bit!!!)
Dies ist der kleinste gemeinsame Nenner der Ziel-Plattformen,
und gemäss diversen Quellen müssen somit portable EXE-Dateien direkt auf der Zielplattform erstellt werden!
(PyInstaller: Python-Code wird mitsamt Python-Interpreter und allen notwendigen Python-Modulen zusammengepackt)

=>darum Python 3 x32 (Anaconda3) als Root-Anaconda-Environment


1) Installation Anaconda:
https://www.anaconda.com/download/

=>Installation "all users"
=>Zu Beachten: Pfad ohne Leerzeichen: https://docs.anaconda.com/anaconda/faq#in-what-folder-should-i-install-anaconda-on-windows
==>gewählt: C:\Anaconda3
=>Installation ohne "Microsoft VSCode".


2) ev: GitHub Desktop installieren
https://desktop.github.com/
https://central.github.com/deployments/desktop/desktop/latest/win32


3) Git for Windows installieren
(gemäss https://github.com/desktop/desktop/issues/3801
können so externe Programme wie z.B. PyCharm Git-Funktionalität nutzen)
https://gitforwindows.org/

=>bei Installation: Notepad++ als Git-Standard-Editor konfigurieren.


4) PyCharm installieren
PyCharm Community Version wählen
https://www.jetbrains.com/pycharm/download/#section=windows

=>Desktop-Link "64-bit launcher"
=>.py File Association erstellen
=>"Download and install JRE x86 by JetBrains" (irgendwo stand diese Empfehlung...)


5) ev: Test der Installation:
-bei Start von PyCharm "Check out from Version Control"
=>Git wählen, https://github.com/stefanbraun-private/pyVisiToolkit.git

-via Startmenü "Anaconda-Navigator" starten
prüfen, welche Environments vorhanden sind


6) Beispiel: neues Projekt "visitoolkit_psc2alm",
als Anwendung des Python-Moduls "visitoolkit_connector"
=>es ist nicht vorgesehen, dass das "PSC to ALM Mappingtool" Funktionalität zur Verfügung stellt,
  darum nur Windows-Binaries und Sourcecode auf GitHub (kein PyPI-Paket)


-"Pycharm" starten, "create new "project",
Name/Ablageort normalerweise im Benutzerverzeichnis: "C:\Users\Asenta\PycharmProjects\visitoolkit_psc2alm"
(neues Conda-Environment "visitoolkit_psc2alm" (Python 3.x) erstellen lassen,
Option "Make available to all projects" nicht aktivieren)


Zum Start der Programmierung alle Python-Packages im aktuellen Environment auf den aktuellen Stand bringen:
-"Pycharm" beenden
-"Anaconda Prompt" starten
-conda Environment aktivieren: "activate visitoolkit_psc2alm"
-conda selber aktualisieren: "conda update -n base conda"
-das Anaconda-Metapaket aktualisieren: "conda install -c anaconda python"


-"Pycharm" -> New Python package: "visitoolkit_psc2alm" ->ergibt Unterordner im Python-Projektordner
bestehenden Quellcode aus Vorgängerprojekt übernehmen und für Python3 bereinigen:
  -"pyVisiToolkit\src\tools\PSC_to_ALM_Mapper.py" in diesen Unterordner kopieren
  -automatisierte Konvertierung Python2-Quellcode zu Python3; Print-Statements habe ich nie verwendet:
      ->"Anaconda Prompt" starten
      ->conda Environment aktivieren: "activate visitoolkit_psc2alm"
      ->"cd C:\Users\Asenta\PycharmProjects\visitoolkit_psc2alm"
      ->"2to3 -w -x print visitoolkit_psc2alm\psc2alm.py"
  -Python-Standard Einrückung mittels 4x Space anstelle Tab korrigieren
      ->Notepad++, RegEx Suchen/Ersetzen: "\t"->"    "

	  
-"Pycharm" -> "Settings" -> "Project: visitoolkit_psc2alm" -> "Interpreter"
  (für Entwicklung benötigt)
  -> Package "visitoolkit-connector" via PyPI installieren (grünes "Conda"-Icon inaktiv, dann "+"),
     zur Vermeidung von Inkompatibilitäten auf bestimmte Version einschränken
  -> Package "PyInstaller" ebenfalls in Pycharm via PyPI installieren
  
  ==>ACHTUNG: manchmal sieht man in PyCharm, in "Anaconda Prompt" und "Anaconda Navigator"
     jeweils mit den Paketmanagern "Conda" und "pip" unterschiedliche Paketversionen... Grund unbekannt.
    (falls sich PyPI-Pakete im PyCharm-Projekt nicht anzeigen lassen:
        "Anaconda Prompt" starten -> "activate visitoolkit_psc2alm", "pip install visitoolkit-connector")	 


Für exakte Duplizierung der Entwicklungsumgebung die Version aller genutzten Conda-Packages erfassen:
(gemäss https://datascience.stackexchange.com/questions/24093/how-to-clone-python-working-environment-on-another-machine)
-"Anaconda Prompt" starten
-conda Environment aktivieren: "activate visitoolkit_psc2alm"
"cd C:\Users\Asenta\PycharmProjects\visitoolkit_psc2alm"
"conda env export > environment.yml" erzeugt Datei "environment.yml"
=>Wiederherstellung klappe dann folgendermassen: "conda env create -f environment.yml" // dies habe ich noch nicht ausprobiert...



7) Veröffentlichung Projekt:

Vorbereitung: ev. folgende Dateien überarbeiten:
.gitignore	// Unterordner ".idea" schliesse ich nicht aus git aus, vielleicht nützt es mal in Zukunft, wenn komplette Umgebung neu installiert werden muss
CHANGES.txt
LICENSE.txt
MANIFEST.in	// Inhalt ist mir nicht mehr ganz klar... :-/
README.md	// in "Pycharm" gibts guten "MarkDown"-Editor! Die gerenderte Ausgabe wird auf GitHub Projektwebseite veröffentlicht
requirements.txt  // inkl. Versionsangaben von Hand pflegen, ergibt in GitHub den "dependency graph"
                    https://help.github.com/articles/listing-the-packages-that-a-repository-depends-on/
                    (Imports durchgehen, hier nachsehen: "Pycharm" -> "Settings" -> "Project: visitoolkit_psc2alm" -> "Interpreter",
                    Teile von "environment.yml" kopieren, Aufbau dieser Datei siehe https://www.jetbrains.com/help/pycharm/managing-dependencies.html )


in PyCharm:
->Einstellungen ->VCS GitHub Account hinterlegen
->VCS ->publish on GitHub (NUR beim ersten Mal und falls es noch nicht existiert!)
->VCS ->Git ->Commit (nach jeder Code-Änderung, dies beeinflusst nur lokales Repository)
->VCS ->Git ->Push... (dies lädt die letzten Änderungen auf GitHub)



Windows EXE-Datei erstellen :
=>siehe Anleitung unter
https://pyinstaller.readthedocs.io/en/stable/operating-mode.html#bundling-to-one-file
-"Anaconda Prompt" starten
-conda Environment aktivieren: "activate visitoolkit_psc2alm"
-in Projektverzeichnis wechseln: "cd C:\Users\Asenta\PycharmProjects\visitoolkit_psc2alm"
-"pyinstaller --onefile --name visitoolkit_psc2alm_v0.0.1_x86 visitoolkit_psc2alm\psc2alm.py"
==>dies generiert die einzelne EXE-Datei unter "..\dist",
diese kann auf GitHub als Release hochgeladen werden.

"pyinstaller --onedir --name visitoolkit_psc2alm_v0.0.1_x86 visitoolkit_psc2alm\psc2alm.py"
  ==>danach dies in ZIP-File packen und im gleichen Zug veröffentlichen

Erklärung zu zweitem Pack-Vorgang:
=>Python 3.x gepackt mittels PyInstaller läuft nicht unter lange nicht mehr aktualisiertem Windows 7 32Bit,
es taucht der Fehler "Der Prozedureinstiegspunkt ucrtbase.abort wurde in der DLL
api-ms-win-crt-runtime-l1-1-0.dll nicht gefunden" auf,
obwohl genau aus diesem Grund auf Win7 x86 als Entwicklungsumgebung gewechselt wurde....

  =>Workaround: Nicht alles in eine EXE packen, sondern nur in gemeinsames Verzeichnis:
  (offenbar ist der Entpacker das Problem, nicht der Python-Interpreter...)
  "pyinstaller --onedir --name visitoolkit_psc2alm_v0.0.1_x86 visitoolkit_psc2alm\psc2alm.py"

  =>Anleitung für Installation der neueren Visual C++ DLLs klappte leider nicht:
https://appuals.com/how-to-fix-the-procedure-entry-point-ucrtbase-terminate-is-missing-or-could-not-be-located/
  =>möglicherweise müsste man das betroffene Windows mit Updates versorgen...
)


(zu beachten: auch wenn Python-Scripte in PyCharm fehlerfrei abgearbeitet werden,
das Zusammenschnüren zu einem EXE-File birgt verschiedene Risiken...
z.B. nicht aufgelöste Abhängigkeiten,
oder z.B. falsches Encoding beim Textdatei-Handling im Konsolenprogramm, etc.
http://python-notes.curiousefficiency.org/en/latest/python3/text_file_processing.html


-vor Veröffentlichung:
  -Testlauf der Anwendung.
   (Sie könnte sich ausserhalb von PyCharm und/oder mit PyInstaller gepackt anders verhalten, z.B. fehlende Dateien)
  -leider sporadisch Antivirus-Fehlalarme aufgrund Heuristik,
   da kann man nicht viel machen... (Prüfung mittels https://www.virustotal.com sollte nicht zu viele Treffer ergeben)
   =>Abhilfe 1): erzeugte EXE im Antivirenprogramm zu den Ausnahmen hinzufügen
   =>Abhilfe 2): Beim Hersteller des EIGENEN Antivirenprogrammes erzeugte EXE als "false positive" melden


